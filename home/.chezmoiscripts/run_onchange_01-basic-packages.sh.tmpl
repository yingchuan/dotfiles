#!/bin/bash
set -euo pipefail

# --- CONFIG ---
sudo_cmd="sudo"

# -- wezterm
curl -fsSL https://apt.fury.io/wez/gpg.key | $sudo_cmd gpg --yes --dearmor -o /usr/share/keyrings/wezterm-fury.gpg
echo 'deb [signed-by=/usr/share/keyrings/wezterm-fury.gpg] https://apt.fury.io/wez/ * *' | $sudo_cmd tee /etc/apt/sources.list.d/wezterm.list
$sudo_cmd chmod 644 /usr/share/keyrings/wezterm-fury.gpg

# --- System Update & Apt Packages ---
$sudo_cmd apt update
{{ range .ubuntu.apt -}}
$sudo_cmd apt install -yy {{ . }}
{{ end }}

# --- Snap Packages ---
{{ range .ubuntu.snap -}}
$sudo_cmd snap install {{ .instance }} {{ .args }}
{{ end }}

# --- Docker Installation ---
if [ ! -f /etc/apt/keyrings/docker.asc ]; then
  echo "[chezmoi] Installing Docker..."
  $sudo_cmd install -m 0755 -d /etc/apt/keyrings
  $sudo_cmd curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
  $sudo_cmd chmod a+r /etc/apt/keyrings/docker.asc

  echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  $sudo_cmd tee /etc/apt/sources.list.d/docker.list > /dev/null

  $sudo_cmd apt-get update
  $sudo_cmd apt-get install -yy docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  $sudo_cmd usermod -aG docker $USER
  systemctl --user daemon-reexec
  # not yet to support since RAG implementation is not in plan recently.
  # systemctl --user enable --now qdrant-compose.service
fi

# --- Fonts ---
echo "[chezmoi] Installing Nerd Font..."
rm -rf ~/.local/share/fonts
mkdir -p ~/.local/share/fonts
cd ~/.local/share/fonts && curl -fLO https://github.com/ryanoasis/nerd-fonts/raw/HEAD/patched-fonts/DroidSansMono/DroidSansMNerdFont-Regular.otf

# --- LazyGit ---
if [ ! -f "$HOME/go/bin/lazygit" ]; then
  go install github.com/jesseduffield/lazygit@latest
fi

# --- Homebrew ---
test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
export HOMEBREW_NO_INSTALL_CLEANUP=true

if ! command -v brew >/dev/null 2>&1; then
  echo "[chezmoi] Installing Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.bashrc
else
  echo "Homebrew is already installed."
fi

# --- pipx via Homebrew ---
if ! command -v pipx >/dev/null 2>&1; then
  echo "[chezmoi] Installing pipx via Homebrew..."
  brew install pipx
  pipx ensurepath
fi

# --- pipx Packages ---
export PATH="$HOME/.local/bin:$PATH"
pipx install poetry
pipx install ruff uv
pipx install pre-commit
pipx install git+https://github.com/openai/whisper.git
pipx install yt-dlp openai-whisper openai

# --- Yek CLI ---
curl -fsSL https://bodo.run/yek.sh | bash

# for jstkdng/programs/ueberzugpp
brew tap jstkdng/programs

# --- Brew Formulae ---
{{ range .homebrew.formulae -}}
brew reinstall {{ . }}
{{ end }}

# --- Perl Neovim::Ext (via local::lib) ---
export PERL_LOCAL_LIB_ROOT="$HOME/perl5"
export PERL_MB_OPT="--install_base $HOME/perl5"
export PERL_MM_OPT="INSTALL_BASE=$HOME/perl5"
export PERL5LIB="$HOME/perl5/lib/perl5"
export PATH="$HOME/perl5/bin:$PATH"

curl -L https://cpanmin.us | perl - --self-upgrade
curl -L https://cpanmin.us | perl - App::cpanminus local::lib
cpanm --local-lib=~/perl5 --notest Neovim::Ext

# --- Ruby Neovim
gem install neovim

# --- Global NPM Packages ---
{{ range .npm.install -}}
npm install -g {{ . }}
{{ end }}

exit 0
